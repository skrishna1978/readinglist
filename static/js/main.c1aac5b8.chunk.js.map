{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","data","Tabletop","init","key","callback","googleData","setState","simpleSheet","this","className","src","logo","alt","color","id","map","obj","Title","href","Reviews","target","Author","Year","Country","Start","End","Cover","height","width","class","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,kC,+YCyD5BC,E,YAnDb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,KAAM,IAHI,E,iFAOO,IAAD,OAClBC,IAASC,KAAK,CACZC,IAAK,+CACLC,SAAU,SAAAC,GACR,EAAKC,SAAS,CACZN,KAAMK,KAGVE,aAAa,M,+BAIP,IACAP,EAASQ,KAAKT,MAAdC,KACR,OAEE,yBAAKS,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,wBAAIH,UAAU,aAAY,0BAAMI,MAAM,SAAZ,sBAE3B,yBAAKC,GAAG,gBAELd,EAAKe,KAAI,SAAAC,GACP,OACO,yBAAKb,IAAKa,EAAIC,OACV,4BAAI,uBAAGC,KAAQF,EAAIG,QAAUC,OAAO,UAAhC,IAA2CJ,EAAIC,QACnD,2BAAID,EAAIK,QACT,2BAAIL,EAAIM,KAAR,KAAgBN,EAAIO,SACpB,2BAAIP,EAAIQ,MAAR,MAAkBR,EAAIS,KACrB,yBAAKb,IAAKI,EAAIU,MAAOhB,IAAKM,EAAIU,MAAOC,OAAO,MAAMC,MAAM,QAC3D,wBAAIC,MAAM,mB,GAvCdC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c1aac5b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.febbbccf.png\";","import React, { Component } from 'react';\r\nimport logo from './logo.png';\r\nimport './App.css';\r\nimport Tabletop from 'tabletop';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      data: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    Tabletop.init({\r\n      key: '1rDbZqPYNaJZDmznIQCXyxbb55Jf6ppJrDZhHY_pdzng',\r\n      callback: googleData => {\r\n        this.setState({\r\n          data: googleData\r\n        })\r\n      },\r\n      simpleSheet: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { data } = this.state\r\n    return (\r\n\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1 className=\"App-title\"><font color=\"black\">i.(am).read(ing)</font></h1>\r\n        </header>\r\n         <div id=\"book-details\">\r\n          {\r\n            data.map(obj => {\r\n              return (\r\n                     <div key={obj.Title}>\r\n                         <h1><a href = {obj.Reviews}  target=\"_blank\"> {obj.Title}</a></h1>\r\n                         <b>{obj.Author}</b>\r\n                        <p>{obj.Year}, {obj.Country}</p>\r\n                        <p>{obj.Start} - {obj.End}</p>\r\n                         <img alt={obj.Cover} src={obj.Cover} height=\"300\" width=\"200\"/>\r\n                      <hr class=\"new1\"></hr>\r\n                      </div>\r\n             )\r\n            })\r\n          }\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}